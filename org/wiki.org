#+HUGO_BASE_DIR: ..
#+HUGO_SECTION: wiki
#+HUGO_WEIGHT: 0

#+seq_todo: TODO DRAFT DONE
#+property: header-args :eval no

* Guix中国镜像
   :PROPERTIES:
   :EXPORT_FILE_NAME: mirror
   :END:

*** Git镜像

- Git镜像地址： =https://mirror.guix.org.cn/git/guix.git= （每十分钟同步一次）
- SJTUG的Git镜像地址： =https://git.sjtu.edu.cn/sjtug/guix.git= （每小时同步一次）

**** 让 ~guix pull~ 使用这个镜像

修改 =~/.config/guix/channels.scm= 文件：
#+begin_src scheme
  (list (channel
         (inherit (car %default-channels))
         (url "https://mirror.guix.org.cn/git/guix.git")))
#+end_src

*** Substitute镜像

- Substitute镜像地址： =https://mirror.guix.org.cn=
- SJTUG的Substitute镜像地址： =https://mirrors.sjtug.sjtu.edu.cn/guix=

SJTUG的镜像服务器速度更快，建议大家使用SJTUG的镜像服务器。如果SJTUG的镜像服务器
运营顺利，Guix中文社区的镜像将在2021年5月1日停止维护。

**** 使用方法

将镜像地址添加到 ~guix-daemon~ 的substitute-urls参数里。

***** Guix system

修改 ~/etc/config.scm~ ：
#+begin_src scheme
  (operating-system
    (services (modify-services %desktop-services
                (guix-service-type
                 config => (guix-configuration
                            (inherit config)
                            (substitute-urls '("https://mirrors.sjtug.sjtu.edu.cn/guix"
                                               "https://ci.guix.gnu.org"))))))
    ...
    )
#+end_src

***** Systemd

修改 ~guix-daemon.service~ ：
#+begin_src conf
  ExecStart=/var/guix/profiles/per-user/root/current-guix/bin/guix-daemon --build-users-group=guixbuild --substitute-urls="https://mirrors.sjtug.sjtu.edu.cn/guix https://ci.guix.gnu.org"
#+end_src

* 社区CI
   :PROPERTIES:
   :EXPORT_FILE_NAME: ci
   :END:

社区构建服务器地址： =https://ci.guix.org.cn/= 。

若使用此服务器，你需要先信任它的公钥。
#+begin_src sh
  guix archive --authorize <<EOF
  (public-key
   (ecc
    (curve Ed25519)
    (q #3BAC7C529783301896751EB5D4DAE186BDB3D5D7FB4D6B8588C2E9273FDB2CB3#)))
  EOF
#+end_src

目前此服务器没有提供特殊的软件包。

* 设置输入法
   :PROPERTIES:
   :EXPORT_FILE_NAME: input-method
   :END:

你可以选择使用 ~ibus~ 或者 ~fcitx~ 。

** 设置 ~ibus~
1. 安装 ~ibus~ 和 ~ibus-libpinyin~ （或 ~ibus-rime~ ）。 由于 ~ibus-setup~ 在运
   行时依赖 ~dconf~ ，所以你需要同时安装 ~dconf~ 。

   例： /etc/config.scm
   #+BEGIN_SRC scheme
     (operating-system
       (packages (cons* ibus ibus-libpinyin dconf
                        %base-packages))
       ...
       )
   #+END_SRC

2. 设置环境变量。

   如果你使用GDM、SDDM等登录管理器（Login Manager/Display Manager），建议通过
   =~/.pam_environment= 文件设置用户的环境变量。

   例： =~/.pam_environment=
   #+begin_src conf
     GTK_IM_MODULE DEFAULT=ibus
     QT_IM_MODULE DEFAULT=ibus
     XMODIFIERS DEFAULT=@im=ibus

     GUIX_GTK2_IM_MODULE_FILE DEFAULT=/run/current-system/profile/lib/gtk-2.0/2.10.0/immodules-gtk2.cache
     GUIX_GTK3_IM_MODULE_FILE DEFAULT=/run/current-system/profile/lib/gtk-3.0/3.0.0/immodules-gtk3.cache
   #+end_src

   如果把 ~ibus~ 安装到user profile里，与上面类似，请替换这两个环境变量（但是作
   者没验证过是否可行）：
   #+BEGIN_SRC sh
     GUIX_GTK2_IM_MODULE_FILE DEFAULT=${HOME}/.guix-profile/lib/gtk-2.0/2.10.0/immodules-gtk2.cache
     GUIX_GTK3_IM_MODULE_FILE DEFAULT=${HOME}/.guix-profile/lib/gtk-3.0/3.0.0/immodules-gtk3.cache
   #+END_SRC

   如果你想使用传统的login shell配置文件方式设置环境变量，请修改对应login shell
   的配置文件。bash用户修改 =~/.profile= 文件，zsh用户修改 =~/.zprofile= 文件。

   注意：
   #+begin_quote
     Guix里的GDM不会自动执行用户的login shell，所以 =~/.profile= 文件里的环境变
     量在登录之后不会生效。推荐使用SDDM。
   #+end_quote

   例：
   #+BEGIN_SRC sh
     export GTK_IM_MODULE="ibus"
     export QT_IM_MODULE="ibus"
     export XMODIFIERS="@im=ibus"

     export GUIX_GTK2_IM_MODULE_FILE=/run/current-system/profile/lib/gtk-2.0/2.10.0/immodules-gtk2.cache
     export GUIX_GTK3_IM_MODULE_FILE=/run/current-system/profile/lib/gtk-3.0/3.0.0/immodules-gtk3.cache
   #+END_SRC

3. 如果你曾经安装过 ~ibus~ ，请删除 =~/.cache/ibus= 这个文件夹。不匹配的
   =~/.cache/ibus= 可能导致 ~ibus~ 无法启动。这是一个已知的bug。
   #+BEGIN_SRC shell
     rm -r ~/.cache/ibus
   #+END_SRC

4. 运行 ~ibus-daemon --xim --replace --daemonize~ 以启动 ~ibus-daemon~ 。
   #+BEGIN_SRC shell
     ibus-daemon --xim --replace --daemonize
   #+END_SRC

5. 运行 ~ibus-setup~ 进入设置界面，添加和设置输入法。
   #+BEGIN_SRC shell
     ibus-setup
   #+END_SRC

6. 好了，你可以使用 ~ibus~ 来输入中文了。

*重要：*
#+begin_quote
  如果 ~ibus~ 无法正常启动，请删除 =~/.cache/ibus= 之后再尝试一次。如果你更新了
  ~ibus~ 软件包，也需要删除 =~/.cache/ibus= 。这是一个已知的bug。
#+end_quote

** 设置 ~fcitx~
@pmeiyu 不使用fcitx，此段略。
* 在Guix System使用带有PAM支持的密码锁
   :PROPERTIES:
   :EXPORT_FILE_NAME: locker-with-pam
   :END:

由於Guix System使用 ~guix system~ 來管理 ~/etc/pam.d~ 所以帶有pam支持的程序需要
另外设置以生成 ~/etc/pam.d~ 下的文件。

1. 在系统配置文件中 ~services~ 字段加入 ~screen-locker-service~ 服务
   比如下面例子中的vlock终端密码锁，其他带有pam验证的锁屏工具等同。

   例： /etc/config.scm
   #+BEGIN_SRC scheme
     (operating-system
       (services (append
                  (list
                   (screen-locker-service kbd "vlock"))
                  %base-services))
       ...
       )
   #+END_SRC
* 在不带有登录管理器的Guix System启动wayland会话
   :PROPERTIES:
   :EXPORT_FILE_NAME: wayland-without-login-manager
   :END:

由於Guix System使用 ~elogind~ 來替代了 ~systemd-logind~ ，所以在tty下启动wayland会话
需要在系统配置文件中另外加入 ~elogind~ ~dbus-system(elogind依赖)~  服务。

1. 在系统配置文件中 ~services~ 字段加入 ~elogind-service~ ~dbus-service~ 服务

   例： /etc/config.scm
   #+BEGIN_SRC scheme
     (operating-system
       (services (append
                  (list
                   (elogind-service)
                   (dbus-service))
                  %base-services))
       ...
       )
   #+END_SRC

2. 在tty登录用户并启动wayland会话。

   例:
   #+BEGIN_SRC shell
   $ tty
   /dev/tty1
   $ sway
   ...
   #+END_SRC
* Guix中使用 ~guix environment --container~ 容器化应用程序会遇到的问题
   :PROPERTIES:
   :EXPORT_FILE_NAME: guix-environment-container-setup
   :END:

~guix environment --container~ 是一个可以随时手搓容器环境的强大功能。
在使用中会遇到以下问题，并附带解决方案，如果有多种解决方案请补充。

** 容器内 ~glibc~ 的 ~locale~ 问题

1. 在~guix environment --container~ 中加入以下选项:

   例：
   #+BEGIN_SRC shell
     guix environment --container\
          ...
          -E^LANG$\
          -E^GUIX_LOCPATH$\
          --ad-hoc glibc-utf8-locales\
          ...
   #+END_SRC

** 容器内 ~tls~ 的证书问题

1. 在~guix environment --container~ 中加入以下选项:

   例：
   #+BEGIN_SRC shell
     guix environment --container\
          ...
          --expose=/etc/ssl \
          --ad-hoc nss-certs curl\
          ...
   #+END_SRC

*提示：*
#+begin_quote
  加入curl包的原因是它会提供许多tls应用使用的环境变量
#+end_quote
** 容器内访问容器外部的 ~wayland~ 会话
1. 在~guix environment --container~ 中加入以下选项:

   例：
   #+BEGIN_SRC shell
     guix environment --container\
          ...
          -E^XDG_RUNTIME_DIR$\
          -E^WAYLAND_DISPLAY$\
          --share=${XDG_RUNTIME_DIR}/${WAYLAND_DISPLAY}\
          ...
   #+END_SRC
** 容器内的字体问题
1. 在~guix environment --container~ 中加入以下选项:

   例：
   #+BEGIN_SRC shell
     guix environment --container\
          ...
          --ad-hoc fontconfig\
          --ad-hoc font1\
          --ad-hoc font2\
          ...
   #+END_SRC

2. 创建一个脚本用来在容器内更新字体缓存:

   例： start.sh
   #+BEGIN_SRC shell
    #!/bin/sh

    ln -s ${GUIX_ENVIRONMENT} ${HOME}/.guix-profile
    fc-cache -rvf
    bash # 如有需指定其他程序请自行替换

   #+END_SRC

*警告：*
#+begin_quote
  请确保容器没有包括容器外的${HOME}/.guix-profile
#+end_quote

*提示：*
#+begin_quote
  请为脚本添加可执行权限
#+end_quote

3. 在~guix environment --container~ 中加入以下选项:

   例：
   #+BEGIN_SRC shell
     guix environment --container\
          ...
          --expose=/path/xxx/start.sh\
          ...
          -- /path/xxx/start.sh
   #+END_SRC

*提示：*
#+begin_quote
  请自行指定脚本存放位置
#+end_quote
** 容器内的gtk主题

1. 在~guix environment --container~ 中加入以下选项:

   例：
   #+BEGIN_SRC shell
     guix environment --container\
          ...
          --expose=${HOME}/.gtkrc-2.0\
          --expose=${HOME}/.config/gtk-3.0/settings.ini\
          --ad-hoc gtk-theme1\
          --ad-hoc gtk-theme2\
          ...
          --ad-hoc icon-theme1\
          --ad-hoc icon-theme2\
          ...
   #+END_SRC
* Guix中使用 ~guix system vm~ 会遇到的问题
   :PROPERTIES:
   :EXPORT_FILE_NAME: guix-system-vm-setup
   :END:

** 运行的虚拟机无法写入 ~/gnu/store~

由于虚拟机使用9p文件系统和虚拟机外部主机只读共享/gnu/store下面的部分内容,
所以无法写入 ~/gnu/store~

如果需要独立的Guix System虚拟机请使用~guix system vm-image~生成虚拟机磁盘镜像,
并使用qemu载入启动

** 机器没有图形界面的情况下操纵虚拟机的控制台

有两种解决方法

*** 使用带有图形的机器使用VNC连接到虚拟机的显示器

   #+BEGIN_SRC shell
   # 运行有虚拟机的服务器
   /gnu/store/fs....sa-run-vm.sh -vnc :0
   #+END_SRC

   #+BEGIN_SRC shell
   # 拥有图形和vnc客户端的机器
   vncviewer <服务器的IP> 5900
   #+END_SRC

*警告：*
#+begin_quote
  VNC使用明文传输数据，请使用加密隧道进行连接
#+end_quote

*** 禁用虚拟机的图形界面并使用串口连接到机器的控制台

   在虚拟机系统配置文件中加入串口getty服务:

   例： vm-config.scm
   #+BEGIN_SRC scheme
     (operating-system
       (services (append
                  (list
                   (service mingetty-service-type
                            (mingetty-configuration
                             (tty "ttyS0")))
                  %base-services))
       ...
       )
   #+END_SRC

   在启动命令中加入 ~-nographic~ 选项
   #+BEGIN_SRC shell
   /gnu/store/fs....sa-run-vm.sh -nographic
   #+END_SRC
